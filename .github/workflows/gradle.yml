name: Java CI with Gradle

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - develop

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: create application.properties
        run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.APPLICATION_INFO }}" > ./application.properties
        shell: bash

      - name: Make Gradlew Executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # dockerfile을 통해 이미지를 빌드하고, 이를 docker repo로 push 합니다.
      # 이 때 사용되는 ${{ secrets.DOCKER_REPO }}/directors-dev 가 위에서 만든 도커 repository 입니다.
      - name: Docker build & push to docker repo
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

          # Gradle 빌드에서 생성된 JAR 파일을 Docker 이미지로 복사
          cp -n build/libs/*.jar app.jar

          # application.properties 파일도 Docker 이미지로 복사
          if [ ! -f ./src/main/resources/application.properties ]; then
            cp ./src/main/resources/application.properties ./src/main/resources/application.properties
          fi

          # Remove the image if it exists
          docker image rm -f ${{ secrets.DOCKER_REPO }} || true

          # Docker 이미지 빌드 및 태그
          docker build -t ${{ secrets.DOCKER_REPO }} .

          # Docker 이미지에 latest 태그 추가
          docker tag ${{ secrets.DOCKER_REPO }}:latest ${{ secrets.DOCKER_REPO }}:latest

          # Docker 이미지를 Docker Hub에 푸시
          docker push ${{ secrets.DOCKER_REPO }}:latest

      ## 서버에 접속하여 도커 이미지를 pull 받고 실행하기
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_REPO }}:latest
            docker stop $(docker ps -a -q)
            docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.DOCKER_REPO }}:latest
            docker rm $(docker ps --filter 'status=exited' -a -q)
            docker image prune -a -f