# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: create application.properties
        run: |
          cd ./src/main/resources
          touch ./application.properties
          echo "${{ secrets.APPLICATION_INFO }}" > ./application.properties
        shell: bash

      - name: Make Gradlew Executable
        run: chmod +x ./gradlew

        # gradle을 통해 소스를 빌드
      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Web Docker Build and Push
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          
          # Gradle 빌드에서 생성된 JAR 파일을 Docker 이미지로 복사
          cp -n build/libs/*.jar app.jar
          
          # application.properties 파일도 Docker 이미지로 복사
          if [ ! -f ./src/main/resources/application.properties ]; then
            cp ./src/main/resources/application.properties ./src/main/resources/application.properties
          fi
          
          # Remove the image if it exists
          docker image rm -f ${{ secrets.DOCKER_REPO }} || true
          
          # Docker 이미지 빌드 및 태그
          docker build -t ${{ secrets.DOCKER_REPO }} .
          
          # Docker 이미지에 latest 태그 추가
          docker tag ${{ secrets.DOCKER_REPO }}:latest ${{ secrets.DOCKER_REPO }}:latest
          
          # Docker 이미지를 Docker Hub에 푸시
          docker push ${{ secrets.DOCKER_REPO }}:latest

      - name: Add EC2 Host Key
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          ssh-keyscan -t rsa ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker rm -f \$(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/directors-dev
            docker-compose up -d
            docker image prune -f
